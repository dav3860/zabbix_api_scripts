#!/usr/bin/env zabbysh
# encoding: utf-8
# -*- encoding : utf-8 -*-
#
require 'slop'
require 'highline/import'

puts "This script will create zabbix IT services based on a host triggers."

# Script parameters
$opts = Slop.new strict: true, help: true do
  banner 'Usage: [options]'

  on :host=,        'The host with the triggers', as: String, required: true
  on :service=,     'The parent IT service (ex: "Web server *")', as: String, required: true
  on :softservice=, 'The parent IT service for the soft link (ex: "Web server *")', as: String
  on :trigger=,     'The trigger filter (ex: "Service * status in down")', as: String, required: true
  on :update,       'Update if service already exists'
  on :application=, 'An application to filter on', as: String
  on :soft,         'Soft link', as: String
  on :yes,          'Batch mode'
end

# Parse the parameters
begin
  $opts.parse
rescue Slop::Error => e
  puts e.message
  puts $opts # print help
  exit
end

if $opts.present?(:soft) and !$opts.present?(:softservice) then
  puts "A parent service for the soft links must be selected"
  exit 1
end

# Search for the parent IT service
s = Service.get(
  "search" => {
    "name"=> $opts[:service]
  },
  'searchWildcardsEnabled' => 1,
  'startSearch' => 1,  
  "searchWildcardsEnabled" => 1
)
if s.empty? then
  puts "No service named like %s in Zabbix" % $opts[:service]
  exit 1
end
myservice = s[0]["serviceid"]

# Search for the parent IT service or the soft links 
if $opts.present?(:softservice) then
  s = Service.get(
    "search" => {
      "name"=> $opts[:softservice]
    },
    'searchWildcardsEnabled' => 1,
    'startSearch' => 1,  
    "searchWildcardsEnabled" => 1
  )
  if s.empty? then
    puts "No service named like %s in Zabbix" % $opts[:softservice]
    exit 1
  end
  mysoftservice = s[0]["serviceid"]
end

if $opts.present?(:application) then
  applications = Application.get("search"=>{"name"=>$opts[:application]})
  appids = applications.map{|x| x['applicationid']}
end

# Search for matching triggers
tr = Trigger.get(
  "host"=> $opts[:host],
  'searchWildcardsEnabled' => 1,
  'startSearch' => 1,
  'applicationids' => appids,
  'search' => {
    'description'=> $opts[:trigger]
  }
)
if tr.empty? then
  puts "No trigger matching the filter \"%s\" on host %s." % [ $opts[:trigger], $opts[:host] ]
  exit 1
end
mylist = tr.map { |n| $opts[:host] + ": " + n["description"] }

# Displays the matching triggers and ask for confirmation
puts "Found %d triggers matching the filter :" % mylist.length
puts mylist
puts
if !$opts.present?(:yes) then
  exit unless HighLine.agree('This will create the corresponding IT services under %s. Do you want to proceed ? (y/n)' % s[0]["name"] )
end

# Creates the new IT services
tr.each do |x|
  name = $opts[:host] + ": " + x["description"]
  service = Service.get( "search" => { "name"=> name })
  if service.empty? then
    puts "Service %s does not exist. Creating it." % name
    Service.create(
      "name"=> name,
      "algorithm"=> 1,
      "showsla"=> 1,
      "sortorder"=> 1,
      "triggerid" => x["triggerid"],
      "parentid"=> myservice
    )
  elsif $opts.present?(:update) then
    puts "Service %s already exists. Updating it." % name
    Service.update(
      "serviceid" => service[0]["serviceid"],
      "algorithm"=> 1,
      "showsla"=> 1,
      "sortorder"=> 1,
      "triggerid" => x["triggerid"],
      "parentid"=> myservice
    )
  else
    puts "Service %s already exists. Skipping." % x 
  end
  
  # Handle soft links
  if $opts.present?(:soft) then
    service = Service.get( "search" => { "name"=> name })
    puts "Creating soft link between services %s and %s." % [name, $opts[:softservice]]
    Service.adddependencies(
      "serviceid" => mysoftservice,
      "dependsOnServiceid" => service[0]["serviceid"],
      "soft" => 1
    )
  end
end
