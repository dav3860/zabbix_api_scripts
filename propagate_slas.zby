#!/usr/bin/env zabbysh
#
require 'slop'
require 'highline/import'

puts "This script will propagate a Zabbix IT service SLAs to its children."

# Définition des paramètres du script
$opts = Slop.new strict: true, help: true do
  banner 'Usage: [options]'

  on :service=,     'The parent IT service (ex: "Web server *")', as: String, required: true
  on :recursive,    'Recursive search of IT services'
  on :yes,          'Batch mode'
end

# Interprétation des paramètres
begin
  $opts.parse
rescue Slop::Error => e
  puts e.message
  puts $opts # print help
  exit
end

def iterate_services (serviceid)
  a = []
  s = Service.get(
    'selectDependencies' => 'extend',
    'serviceids' => serviceid
  )
  if !s.empty? then
    s[0]["dependencies"].each do |x|
      a = a + iterate_services( x['serviceid'] )
    end
  end
  a << serviceid
  return a
end    

# Search for the parent IT service
s = Service.get(
  'selectDependencies' => 'extend',
  'searchWildcardsEnabled' => 1,
  'startSearch' => 1,
  'search' => {
    'name'=> $opts[:service]
  }
)
if s.empty? then
  puts "No IT service named like \"%s\" in Zabbix" % $opts[:service]
  exit 1
end

# iterate through dependencies
if $opts.present?(:recursive) then
  myservices = iterate_services(s[0]['serviceid'])
  myservices.delete(s[0]['serviceid']) # remove parent element
else
  myservices = s[0]["dependencies"].map { |n| n["serviceid"] }
end
if myservices.empty? then
  puts "No child for IT service \"%s\" in Zabbix" % s[0]['name']
  exit 1
end

goodsla = s[0]["goodsla"]

# Displays the matching children and ask for confirmation
puts "Found %d child IT services." % myservices.length
puts
if !$opts.present?(:yes) then
  exit unless HighLine.agree('This will update the corresponding IT services under "%s" with the SLA %s. Do you want to proceed ? (y/n)' % [ s[0]['name'], goodsla]  )
end

myservices.each do |x|
  puts "Updating SLA for serviceid %s" % x
  Service.update(
    "serviceid" => x,
    "goodsla" => goodsla
  )
end
